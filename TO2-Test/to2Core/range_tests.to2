use * from core::testing

test sync fn test_basic_range_exclusive() -> Unit = {
    let k = 0

    for(i in 0..10) {
        assert_int(k, i)
        k = k + 1
    }

    assert_int(10, k)

    let range = (10 + 5)..(3 * 10)

    k = 15

    for(i in range) {
        assert_int(k, i)
        k = k + 1
    }

    assert_int(30, k)
}

test sync fn test_basic_range_inclusive() -> Unit = {
    let k = 0

    for(i in 0...10) {
        assert_int(k, i)
        k = k + 1
    }

    assert_int(11, k)

    let range = (10 + 5)...(3 * 10)

    k = 15

    for(i in range) {
        assert_int(k, i)
        k = k + 1
    }

    assert_int(31, k)
}

test sync fn test_map_range() -> Unit = {
    const arr = (10 .. 20).map(fn(i) -> 2 * i)

    assert_int(10, arr.length)
    for(i in 0..10) {
        assert_int(2 * (i + 10), arr[i])
    }
}

test sync fn test_reverse() -> Unit = {
    const str = (10..20).reverse().to_string()
    
    assert_string("[19, 18, 17, 16, 15, 14, 13, 12, 11, 10]", str)
}

test sync fn test_to_string() -> Unit = {
    assert_string("10..20", (10..20).to_string())
    assert_string("[10, 11, 12, 13, 14, 15, 16, 17, 18, 19]", (10..20).map(fn(i) -> i).to_string())
}

test sync fn test_reduce() -> Unit = {
    assert_int(145, (10..20).reduce(0, fn(sum, item) -> sum + item))
    assert_int(5050, (1...100).reduce(0, fn(sum, item) -> sum + item)) // Gauss
}