use * from core::testing

test sync fn test_assign() -> Unit = {
    let a: string = "Nothing"

    assert_string("Nothing", a)

    a = "Not Nothing"

    assert_string("Not Nothing", a)
}

test sync fn test_if() -> Unit = {
    let a: string = "Nothing"
    let b: int = 1234

    if(b == 1234) a = "Was eq"

    assert_string("Was eq", a)

    if (b != 1234) a = "Was not eq"

    assert_string("Was eq", a)

    if( b != 1235 ) a = "Was not eq"

    assert_string("Was not eq", a)
}

test sync fn test_if_else() -> Unit = {
    let a: string = "Nothing"
    let b: int = 1234

    assert_string("Was eq", if(b == 1234) "Was eq" else "Was not eq")
    assert_string("Was not eq", if (b == 1235) "Was eq" else "Was not eq")
}

test sync fn test_if_result() -> Unit = {
    const a = 1234

    let result = if(a < 300) "Less 300"

    assert_false(result.defined)

    result = if(a > 300) "Greater 300"

    assert_true(result.defined)
    assert_string("Greater 300", result.value)
}

sync fn if_else_cascade(a: int) -> string = if(a < 0) "Less Null" else if(a > 0) "Greater Null" else "Null"

test sync fn test_if_else_cascade() -> Unit = {
    assert_string("Less Null", if_else_cascade(-2))
    assert_string("Greater Null", if_else_cascade(1))
    assert_string("Null", if_else_cascade(0))
}

sync fn if_else_open(a: int) -> Option<string> = if(a < 0) "Less Null" else if(a > 0) "Greater Null"

test sync fn test_if_else_open() -> Unit = {
    const result1 = if_else_open(-10)
    const result2 = if_else_open(2)
    const result3 = if_else_open(0)
    
    assert_true(result1.defined)
    assert_string("Less Null", result1.value)
    
    assert_true(result2.defined)
    assert_string("Greater Null", result2.value)

    assert_false(result3.defined)
}